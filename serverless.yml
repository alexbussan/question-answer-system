service: qna-system
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

plugins:
  - serverless-localstack
custom:
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566

resources:
  Resources:
    ExampleRepository:
      Type: AWS::ECR::Repository
      Properties:
        RepositoryName: serverless-qna-system-local
#    ExampleTable:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: ExampleTable
#        AttributeDefinitions:
#          - AttributeName: email
#            AttributeType: S
#        KeySchema:
#          - AttributeName: email
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#    MyS3Bucket:
#      Type: AWS::S3::Bucket

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      embed:
        path: handlers/
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - dynamodb:Query
#            - dynamodb:Scan
#            - dynamodb:DescribeTable
#            - dynamodb:GetItem
#          Resource:
#            Fn::GetAtt:
#              - ExampleTable
#              - Arn
#        - Effect: "Allow"
#          Action:
#            - s3:GetObject
#            - s3:PutObject
#          Resource:
#            Fn::GetAtt:
#              - MyS3Bucket
#              - Arn
#        - Effect: "Allow"
#          Action:
#            - logs:PutLogEvents
#            - logs:CreateLogGroup
#            - logs:CreateLogStream
#          Resource: arn:aws:logs:*:*:*

functions:
  hello:
    image:
      name: embed

    # handler: handlers/embed_documents.handler